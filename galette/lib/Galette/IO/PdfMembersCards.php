<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Member card PDF
 *
 * PHP version 5
 *
 * Copyright Â© 2014 The Galette Team
 *
 * This file is part of Galette (http://galette.tuxfamily.org).
 *
 * Galette is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Galette is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Galette. If not, see <http://www.gnu.org/licenses/>.
 *
 * @category  IO
 * @package   Galette
 *
 * @author    Johan Cwiklinski <johan@x-tnd.be>
 * @copyright 2014 The Galette Team
 * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version
 * @version   SVN: $Id$
 * @link      http://galette.tuxfamily.org
 * @since     Available since 0.8.2dev - 2014-11-30
 */

namespace Galette\IO;

use Galette\Core\Preferences;
use Galette\Core\PrintLogo;
use Analog\Analog;

/**
 * Member card PDF
 *
 * @category  IO
 * @name      PDF
 * @package   Galette
 * @abstract  Class for expanding TCPDF.
 * @author    Johan Cwiklinski <johan@x-tnd.be>
 * @copyright 2014 The Galette Team
 * @license   http://www.gnu.org/licenses/gpl-3.0.html GPL License 3.0 or (at your option) any later version
 * @link      http://galette.tuxfamily.org
 * @since     Available since 0.8.2dev - 2014-11-30
 */

class PdfMembersCards extends Pdf
{
    private $_tcol;
    private $_scol;
    private $_bcol;
    private $_hcol;
    private $_xorigin;
    private $_yorigin;
    private $_w;
    private $_h;
    private $_nbcol;
    private $_nbrow;
    private $_hspacing;
    private $_vspacing;
    private $_max_text_size;
    private $_year_font_size;
    private $_an_cot;
    private $_abrev;
    private $_wlogo;
    private $_hlogo;
    private $_logofile;

    /**
     * Main constructor, set creator and author
     *
     * @param Preferences $prefs Preferences
     */
    public function __construct(Preferences $prefs)
    {
        parent::__construct($prefs);
        $this->_init();
    }
    /**
     * Initialize PDF
     *
     * @return void
     */
    private function _init()
    {
        // Set document information
        $this->SetTitle(_T("Member's Cards"));
        $this->SetSubject(_T("Generated by Galette"));
        $this->SetKeywords(_T("Cards"));

        // No hearders and footers
        $this->SetPrintHeader(false);
        $this->SetPrintFooter(false);
        $this->setFooterMargin(0);
        $this->setHeaderMargin(0);

        // Show full page
        $this->SetDisplayMode('fullpage');

        // Disable Auto Page breaks
        $this->SetAutoPageBreak(false, 0);

        // Set colors
        $this->SetDrawColor(160, 160, 160);
        $this->SetTextColor(0);
        $this->_tcol = $this->colorHex2Dec($this->preferences->pref_card_tcol);
        $this->_scol = $this->colorHex2Dec($this->preferences->pref_card_scol);
        $this->_bcol = $this->colorHex2Dec($this->preferences->pref_card_bcol);
        $this->_hcol = $this->colorHex2Dec($this->preferences->pref_card_hcol);

        // Set margins
        $this->SetMargins(
            $this->preferences->pref_card_marges_h,
            $this->preferences->pref_card_marges_v
        );

        // Set font
        $this->SetFont(self::FONT);

        // Set origin
        // Top left corner
        $this->_xorigin = $this->preferences->pref_card_marges_h;
        $this->_yorigin = $this->preferences->pref_card_marges_v;

        // Card width
        $this->_w = 75;
        // Card heigth
        $this->_h = 40;
        // Number of colons
        $this->_nbcol=2;
        // Number of rows
        $this->_nbrow=6;
        // Spacing betweeen cards
        $this->_hspacing = $this->preferences->pref_card_hspace;
        $this->_vspacing = $this->preferences->pref_card_vspace;

        //maximum size for visible text. May vary with fonts.
        $this->_max_text_size = 80;
        $this->_year_font_size = 8;


        // Get fixed data from preferences
        $this->_an_cot = '<strong>' . $this->preferences->pref_card_year .
            '</strong>';
        $this->_abrev = '<strong>' . $this->preferences->pref_card_abrev .
            '</strong>';

        $print_logo = new PrintLogo();
        if ( $print_logo->hasPicture() ) {
            $this->_logofile = $print_logo->getPath();

            // Set logo size to max width 30 mm or max height 25 mm
            $ratio = $print_logo->getWidth()/$print_logo->getHeight();
            if ( $ratio < 1 ) {
                if ( $print_logo->getHeight() > 16 ) {
                    $this->_hlogo = 25;
                } else {
                    $this->_hlogo = $print_logo->getHeight();
                }
                $this->_wlogo = round($this->_hlogo*$ratio);
            } else {
                if ( $print_logo->getWidth() > 16 ) {
                    $this->_wlogo = 30;
                } else {
                    $this->_wlogo = $print_logo->getWidth();
                }
                $this->_hlogo = round($this->_wlogo/$ratio);
            }
        }
    }

    /**
     * Draw members cards
     *
     * @param array $members Members
     *
     * @return void
     */
    public function drawCards($members)
    {
        $nb_card=0;
        foreach ( $members as $member ) {
            // Detect page breaks
            if ( $nb_card % ($this->_nbcol * $this->_nbrow)==0 ) {
                $this->AddPage();
            }

            // Compute card position on page
            $col = $nb_card % $this->_nbcol;
            $row = ($nb_card/$this->_nbcol) % $this->_nbrow;
            // Set origin
            $x0 = $this->_xorigin + $col*(round($this->_w)+round($this->_hspacing));
            $y0 = $this->_yorigin + $row*(round($this->_h)+round($this->_vspacing));
            // Logo X position
            $xl = round($x0 + $this->_w - $this->_wlogo);
            // Get data
            $email = '<strong>';
            switch ( $this->preferences->pref_card_address ) {
            case 0:
                $email .= $member->email;
                break;
            case 1:
                $email .= $member->msn;
                break;
            case 2:
                $email .= $member->jabber;
                break;
            case 3:
                $email .= $member->website;
                break;
            case 4:
                $email .= $member->icq;
                break;
            case 5:
                $email .= $member->zipcode . ' - ' . $member->town;
                break;
            case 6:
                $email .= $member->nickname;
                break;
            case 7:
                $email .= $member->job;
                break;
            }
            $email .= '</strong>';

            // Select strip color according to status
            switch ( $member->status ) {
            case  1 :
            case  2 :
            case  3 :
            case 10 :
                $fcol = $this->_bcol;
                break;
            case  5 :
            case  6 :
                $fcol = $this->_hcol;
                break;
            default :
                $fcol = $this->_scol;
            }

            $id = '<strong>' . $member->id . '</strong>';
            $nom_adh_ext = '<strong>';
            if ( $this->preferences->pref_bool_display_title ) {
                $nom_adh_ext .= $member->stitle;
            }
            $nom_adh_ext .= $member->sname . '</strong>';
            $photo = $member->picture;
            $photofile = $photo->getPath();

            // Photo 100x130 and logo
            $this->Image($photofile, $x0, $y0, 25);
            $this->Image($this->_logofile, $xl, $y0, round($this->_wlogo));

            // Color=#8C8C8C: Shadow of the year
            $this->SetTextColor(140);
            $this->SetFontSize($this->_year_font_size);
            $this->SetXY($x0 + 65, $y0 + $this->_hlogo);
            $this->writeHTML($this->_an_cot, false, 0);

            // Colored Text (Big label, id, year)
            $this->SetTextColor($fcol['R'], $fcol['G'], $fcol['B']);

            $this->SetFontSize(8);
            $this->SetXY($x0 + 69, $y0 + 28);
            $this->writeHTML($id, false, 0);
            $this->SetFontSize($this->_year_font_size);
            $this->SetXY($x0 + 64.7, $y0 + $this->_hlogo - 0.3);
            $this->writeHTML($this->_an_cot, false, 0);

            // Abbrev: Adapt font size to text length
            $fontsz = 12;
            $this->SetFontSize($fontsz);
            while ( $this->GetStringWidth($this->_abrev) > $this->_max_text_size ) {
                $fontsz--;
                $this->SetFontSize($fontsz);
            }
            $this->SetXY($x0 + 27, $y0 + 12);
            $this->writeHTML($this->_abrev, true, 0);

            // Name: Adapt font size to text length
            $this->SetTextColor(0);
            $fontsz = 8;
            $this->SetFontSize($fontsz);
            while ( $this->GetStringWidth($nom_adh_ext) > $this->_max_text_size ) {
                $fontsz--;
                $this->SetFontSize($fontsz);
            }
            $this->SetXY($x0 + 27, $this->getY() + 4);
            //$this->setX($x0 + 27);
            $this->writeHTML($nom_adh_ext, true, 0);

            // Email (adapt too)
            $fontsz = 6;
            $this->SetFontSize($fontsz);
            while ( $this->GetStringWidth($email) > $this->_max_text_size ) {
                $fontsz--;
                $this->SetFontSize($fontsz);
            }
            $this->setX($x0 + 27);
            $this->writeHTML($email, false, 0);

            // Lower colored strip with long text
            $this->SetFillColor($fcol['R'], $fcol['G'], $fcol['B']);
            $this->SetTextColor(
                $this->_tcol['R'],
                $this->_tcol['G'],
                $this->_tcol['B']
            );
            $this->SetFont(self::FONT, 'B', 6);
            $this->SetXY($x0, $y0 + 33);
            $this->Cell(
                $this->_w,
                7,
                $this->preferences->pref_card_strip,
                0,
                0,
                'C',
                1
            );

            // Draw a gray frame around the card
            $this->Rect($x0, $y0, $this->_w, $this->_h);
            $nb_card++;
        }

    }
}
